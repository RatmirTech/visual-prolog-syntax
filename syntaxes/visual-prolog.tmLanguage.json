{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Visual Prolog",
  "scopeName": "source.visual-prolog",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#directives" },
    { "include": "#keywords" },
    { "include": "#builtins" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#predicates" },
    { "include": "#atoms" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.percentage.visual-prolog",
          "match": "%.*$"
        },
        {
          "name": "comment.block.visual-prolog",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "comment.block.documentation.visual-prolog",
              "match": "\\*.*"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.visual-prolog",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.visual-prolog",
              "match": "\\\\[nrtbf\\\\\"']|\\\\[0-9]{3}|\\\\x[0-9a-fA-F]{2}"
            }
          ]
        },
        {
          "name": "string.quoted.single.visual-prolog",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.visual-prolog",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hexadecimal.visual-prolog",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.visual-prolog",
          "match": "\\b0o[0-7]+\\b"
        },
        {
          "name": "constant.numeric.binary.visual-prolog",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.float.visual-prolog",
          "match": "\\b\\d+\\.\\d+(?:[eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.visual-prolog",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "name": "keyword.directive.section.visual-prolog",
          "match": "\\b(?:domains|predicates|clauses|goal|constants|facts|database|global)\\b"
        },
        {
          "name": "keyword.directive.class.visual-prolog",
          "match": "\\b(?:class|object|interface|implement|open)\\b"
        },
        {
          "name": "keyword.directive.end.visual-prolog",
          "match": "\\b(?:end\\s+(?:class|object|interface|implement|if))\\b"
        },
        {
          "name": "keyword.directive.module.visual-prolog",
          "match": "\\b(?:module|include|export|compiler|code)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.conditional.visual-prolog",
          "match": "\\b(?:if|then|else|elseif)\\b"
        },
        {
          "name": "keyword.control.flow.visual-prolog",
          "match": "\\b(?:not|fail|true|and|or|repeat|cut)\\b"
        },
        {
          "name": "keyword.modifier.visual-prolog",
          "match": "\\b(?:determ|nondeterm|multi|procedure|single|language|anyflow)\\b"
        },
        {
          "name": "storage.modifier.visual-prolog",
          "match": "\\b(?:static|abstract|virtual|override|final)\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.io.visual-prolog",
          "match": "\\b(?:write|writef|writeln|read|readln|readchar|readint|readreal|nl|get|put|get0|put0)\\b"
        },
        {
          "name": "support.function.database.visual-prolog",
          "match": "\\b(?:asserta|assertz|assert|retract|retractall|save|consult|findall|bagof|setof)\\b"
        },
        {
          "name": "support.function.string.visual-prolog",
          "match": "\\b(?:concat|frontchar|fronttoken|str_len|str_int|str_real|upper_lower|isname|char_int)\\b"
        },
        {
          "name": "support.function.file.visual-prolog",
          "match": "\\b(?:openread|openwrite|openappend|openmodify|closefile|readdevice|writedevice|filepos|eof|flush|deletefile|renamefile|existfile|disk|dir|file_str)\\b"
        },
        {
          "name": "support.function.system.visual-prolog",
          "match": "\\b(?:exit|system|time|date|random|randomize|sound|makewindow|shiftwindow|clearwindow|scr_char|scr_attr|cursor|field_str|field_attr)\\b"
        },
        {
          "name": "support.function.conversion.visual-prolog",
          "match": "\\b(?:val|str|term_str|term_bin)\\b"
        },
        {
          "name": "support.function.list.visual-prolog",
          "match": "\\b(?:member|append|length|reverse|sort|nth|delete|last)\\b"
        },
        {
          "name": "constant.language.boolean.visual-prolog",
          "match": "\\b(?:true|false)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.visual-prolog",
          "match": "\\b(?:char|byte|short|ushort|word|integer|unsigned|long|ulong|dword|real|real4|real8|string|symbol|pointer|binary|file)\\b"
        },
        {
          "name": "entity.name.type.custom.visual-prolog",
          "match": "(?<=domains\\s+)([A-Z][A-Za-z0-9_]*)\\s*=",
          "captures": {
            "1": { "name": "entity.name.type.domain.visual-prolog" }
          }
        },
        {
          "name": "entity.name.type.visual-prolog",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.visual-prolog",
          "match": "\\b(?:not|and|or)\\b"
        },
        {
          "name": "keyword.operator.clause.visual-prolog",
          "match": ":-|\\?-"
        },
        {
          "name": "keyword.operator.comparison.visual-prolog",
          "match": "=|<>|<|>|<=|>=|==|\\\\=|=:=|=\\\\=|@<|@>|@=<|@>="
        },
        {
          "name": "keyword.operator.arithmetic.visual-prolog",
          "match": "\\+|-|\\*|/|//|\\bmod\\b|\\brem\\b|\\bdiv\\b|\\^|\\*\\*"
        },
        {
          "name": "keyword.operator.bitwise.visual-prolog",
          "match": "\\bshl\\b|\\bshr\\b|\\band\\b|\\bor\\b|\\bxor\\b|\\bnot\\b"
        },
        {
          "name": "keyword.operator.list.visual-prolog",
          "match": "\\|"
        },
        {
          "name": "punctuation.separator.visual-prolog",
          "match": ",|;|\\."
        }
      ]
    },
    "predicates": {
      "patterns": [
        {
          "name": "entity.name.function.predicate.visual-prolog",
          "match": "\\b[a-z][A-Za-z0-9_]*(?=\\s*\\()"
        },
        {
          "name": "entity.name.function.fact.visual-prolog",
          "match": "(?<=predicates\\s+)([a-z][A-Za-z0-9_]*)(?=\\s*\\()",
          "captures": {
            "1": { "name": "entity.name.function.declaration.visual-prolog" }
          }
        }
      ]
    },
    "atoms": {
      "patterns": [
        {
          "name": "constant.other.atom.visual-prolog",
          "match": "\\b[a-z][A-Za-z0-9_]*\\b"
        }
      ]
    }
  }
}